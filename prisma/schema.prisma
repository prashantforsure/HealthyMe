generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id  String @id @default(cuid())
  name String?
  email String? @unique
  emailVerified DateTime?
  password      String?   
  image String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  healthGoal String?
  dietaryPrefrences String?
  allergies String[]
  restrictions      String[]
  activityLevel     String?
  sleepPattern      String?
  age               Int?
  height            Float?
  weight            Float?
  bmi               Float?
  bloodWork         Json?
  medicalHistory    String?
  accounts          Account[]
  comments Comment[]
  fitnessTrackerSyncs FitnessTrackerSync[]
  communityPosts CommunityPost[]
  foodRecognitions FoodRecognition[]
  sessions          Session[]
  mealPlans         MealPlan[]
  recipes           Recipe[]
  shoppingLists     ShoppingList[]
  progressRecords   ProgressRecord[]
  aiCoachingSessions AICoachingSession[]
}

model Account{
  id String @id @default(cuid())
  userId String
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.Text
  access_token String? @db.Text
  expires_at Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session{
  id String @id @default(cuid())
  sessionToken String @unique
  userId String
  expires DateTime
  user User @relation(fields: [userId], references: [id])

}
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model MealPlan {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  startDate DateTime
  endDate   DateTime
  meals     Meal[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model  Meal{
  id String @id @default(cuid())
  mealPlanId String
  mealPlan MealPlan @relation(fields: [mealPlanId], references: [id])
  recipeId String
  recipe Recipe @relation(fields: [recipeId], references: [id])
  date DateTime
  type String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Recipe {
  id             String   @id @default(cuid())
  name           String
  description    String
  ingredients    Json
  instructions   String[]
  nutritionInfo  Json
  prepTime       Int
  cookTime       Int
  servings       Int
image         String?
  tags           String[]
  createdBy      String
  user           User     @relation(fields: [createdBy], references: [id])
  meals          Meal[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model ShoppingList{
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id])
  items Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProgressRecord {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  date      DateTime
  weight    Float?
  calories  Int?
  macros    Json?
  adherence Float?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model AICoachingSession{
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id])
  messages Json[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FitnessTrackerSync {
  id           String   @id @default(cuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id])
  provider     String
  lastSyncDate DateTime
  data         Json
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model CommunityPost {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  content   String
  type      String  
  likes     Int      @default(0)
  comments  Comment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  postId    String
  post      CommunityPost @relation(fields: [postId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FoodRecognition {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  imageUrl  String
  results   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model USDAFoodItem {
  id            String   @id @default(cuid())
  fdcId         String   @unique
  description   String
  dataType      String
  publicationDate DateTime
  brandOwner    String?
  gtinUpc       String?
  ingredients   String?
  servingSize   Float?
  servingSizeUnit String?
  nutritionData Json
  usdafoodnurtrients USDAFoodNutrient[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model USDANutrient {
  id            String   @id @default(cuid())
  number        String   @unique
  name          String
  unitName      String
  createdAt     DateTime @default(now())
  usdafoodnurtrients USDAFoodNutrient[]
  updatedAt     DateTime @updatedAt
}

model USDAFoodNutrient {
  id            String   @id @default(cuid())
  foodItemId    String
  foodItem      USDAFoodItem @relation(fields: [foodItemId], references: [id])
  nutrientId    String
  nutrient      USDANutrient @relation(fields: [nutrientId], references: [id])
  amount        Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([foodItemId, nutrientId])
}